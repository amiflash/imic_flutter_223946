// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/user.dart';
import 'models/workout.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4153374541117734265),
      name: 'User',
      lastPropertyId: const IdUid(10, 1835684013088385677),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2358423038922779861),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 934281734564569608),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6242599805763209026),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7468492721876003902),
            name: 'avatarURL',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6486141746945294374),
            name: 'sex',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5919561745728808592),
            name: 'dateOfBird',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6195675792683251305),
            name: 'height',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 562741981700492961),
            name: 'weight',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4724356856723799304),
            name: 'isLogined',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1835684013088385677),
            name: 'avartarURL',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'workouts', srcEntity: 'Workout', srcField: 'user')
      ]),
  ModelEntity(
      id: const IdUid(2, 5470145747435685612),
      name: 'Workout',
      lastPropertyId: const IdUid(5, 4073223141328070304),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1051349181207154418),
            name: 'workoutId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5432039620532538930),
            name: 'workoutTitle',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3255210947770624775),
            name: 'distance',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5804856940186109761),
            name: 'duration',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4073223141328070304),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 5207964334979753865),
            relationTarget: 'User')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 5470145747435685612),
      lastIndexId: const IdUid(1, 5207964334979753865),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    User: EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {
              RelInfo<Workout>.toOneBacklink(
                      5, object.id, (Workout srcObject) => srcObject.user):
                  object.workouts
            },
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final userNameOffset = fbb.writeString(object.userName);
          final emailOffset = fbb.writeString(object.email);
          final avatarURLOffset = object.avatarURL == null
              ? null
              : fbb.writeString(object.avatarURL!);
          final sexOffset =
              object.sex == null ? null : fbb.writeString(object.sex!);
          final dateOfBirdOffset = object.dateOfBird == null
              ? null
              : fbb.writeString(object.dateOfBird!);
          final avartarURLOffset = object.avartarURL == null
              ? null
              : fbb.writeString(object.avartarURL!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userNameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, avatarURLOffset);
          fbb.addOffset(4, sexOffset);
          fbb.addOffset(5, dateOfBirdOffset);
          fbb.addFloat64(6, object.height);
          fbb.addFloat64(7, object.weight);
          fbb.addBool(8, object.isLogined);
          fbb.addOffset(9, avartarURLOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              userName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              isLogined: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 20, false))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..avatarURL = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..sex = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..dateOfBird = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..height = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 16)
            ..weight = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 18)
            ..avartarURL = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22);
          InternalToManyAccess.setRelInfo<User>(
              object.workouts,
              store,
              RelInfo<Workout>.toOneBacklink(
                  5, object.id, (Workout srcObject) => srcObject.user));
          return object;
        }),
    Workout: EntityDefinition<Workout>(
        model: _entities[1],
        toOneRelations: (Workout object) => [object.user],
        toManyRelations: (Workout object) => {},
        getId: (Workout object) => object.workoutId,
        setId: (Workout object, int id) {
          object.workoutId = id;
        },
        objectToFB: (Workout object, fb.Builder fbb) {
          final workoutTitleOffset = fbb.writeString(object.workoutTitle);
          final distanceOffset = fbb.writeString(object.distance);
          final durationOffset = fbb.writeString(object.duration);
          fbb.startTable(6);
          fbb.addInt64(0, object.workoutId);
          fbb.addOffset(1, workoutTitleOffset);
          fbb.addOffset(2, distanceOffset);
          fbb.addOffset(3, durationOffset);
          fbb.addInt64(4, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.workoutId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Workout(
              workoutTitle: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              distance: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              duration: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..workoutId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.user.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// see [User.userName]
  static final userName = QueryStringProperty<User>(_entities[0].properties[1]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[0].properties[2]);

  /// see [User.avatarURL]
  static final avatarURL =
      QueryStringProperty<User>(_entities[0].properties[3]);

  /// see [User.sex]
  static final sex = QueryStringProperty<User>(_entities[0].properties[4]);

  /// see [User.dateOfBird]
  static final dateOfBird =
      QueryStringProperty<User>(_entities[0].properties[5]);

  /// see [User.height]
  static final height = QueryDoubleProperty<User>(_entities[0].properties[6]);

  /// see [User.weight]
  static final weight = QueryDoubleProperty<User>(_entities[0].properties[7]);

  /// see [User.isLogined]
  static final isLogined =
      QueryBooleanProperty<User>(_entities[0].properties[8]);

  /// see [User.avartarURL]
  static final avartarURL =
      QueryStringProperty<User>(_entities[0].properties[9]);
}

/// [Workout] entity fields to define ObjectBox queries.
class Workout_ {
  /// see [Workout.workoutId]
  static final workoutId =
      QueryIntegerProperty<Workout>(_entities[1].properties[0]);

  /// see [Workout.workoutTitle]
  static final workoutTitle =
      QueryStringProperty<Workout>(_entities[1].properties[1]);

  /// see [Workout.distance]
  static final distance =
      QueryStringProperty<Workout>(_entities[1].properties[2]);

  /// see [Workout.duration]
  static final duration =
      QueryStringProperty<Workout>(_entities[1].properties[3]);

  /// see [Workout.user]
  static final user =
      QueryRelationToOne<Workout, User>(_entities[1].properties[4]);
}
